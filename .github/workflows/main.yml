name: CI

on:
  pull_request:
    branches:
    - master
  push:
    branches:
    - master
  schedule:
    - cron: '17 10 * * *' # run at 10 AM UTC every day.

jobs:
  changelog:
    name: CHANGELOG
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v1

    - name: Debugging info
      run: |
        git remote -v

    - name: Check that CHANGELOG has been updated
      run: |
        # If this step fails, this means you haven't updated the CHANGELOG.md
        # file with notes on your contribution.
        git diff --name-only $(git merge-base origin/master HEAD) | grep '^CHANGELOG.md$' && echo "Thanks for helping keep our CHANGELOG up-to-date!"

  checks:
    name: Checks
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python: ['3.6', '3.7']

    steps:
    - uses: actions/checkout@v2

    - name: Setup Python
      uses: actions/setup-python@v1
      with:
        python-version: ${{ matrix.python }}

    - uses: actions/cache@v2
      with:
        path: ${{ env.pythonLocation }}
        key: ${{ runner.os }}-pydeps-${{ env.pythonLocation }}-${{ hashFiles('requirements.txt') }}-${{ hashFiles('dev-requirements.txt') }}

    - name: Install requirements
      run: |
        pip install --upgrade pip setuptools wheel
        pip install --upgrade --upgrade-strategy eager -r requirements.txt
        pip install --upgrade --upgrade-strategy eager -r dev-requirements.txt

    - name: Show pip freeze
      run: |
        pip freeze

    - name: Format
      run: |
        make format

    - name: Lint
      run: |
        make lint

    - name: Type check
      run: |
        make typecheck

    - name: Run tests
      run: |
        make test-with-cov

    - name: Upload coverage to Codecov
      if: matrix.python == '3.7' && github.repository == 'allenai/allennlp-models'
      uses: codecov/codecov-action@v1
      with:
        file: ./coverage.xml
        # Ignore codecov failures as the codecov server is not
        # very reliable but we don't want to report a failure
        # in the github UI just because the coverage report failed to
        # be published.
        fail_ci_if_error: false

  pretrained:
    name: Pretrained Models
    # Don't run for forks.
    if: github.repository == 'allenai/allennlp-models'
    runs-on: [self-hosted]

    steps:
    - uses: actions/checkout@v2

    - name: Set Docker tag
      run: |
        echo "::set-env name=DOCKER_TAG::$GITHUB_SHA";

    - name: Build test image
      run: |
        make docker-test-image DOCKER_TAG=$DOCKER_TAG

    - name: Run pretrained tests
      run: |
        make docker-test-run DOCKER_TAG=$DOCKER_TAG ARGS='test-pretrained'

  configs:
    name: Training Configs 
    if: github.repository == 'allenai/allennlp-models'
    runs-on: [self-hosted]

    steps:
    - uses: actions/checkout@v2

    - name: Set Docker tag
      run: |
        echo "::set-env name=DOCKER_TAG::$GITHUB_SHA";

    - name: Build test image
      run: |
        make docker-test-image DOCKER_TAG=$DOCKER_TAG

    - name: Validate training configs
      run: |
        make docker-test-run DOCKER_TAG=$DOCKER_TAG ARGS='test-configs'

  gpu_checks:
    name: GPU Checks
    # Don't run for forks.
    if: github.repository == 'allenai/allennlp-models'
    runs-on: [self-hosted, GPU]

    steps:
    - uses: actions/checkout@v2

    - name: Set Docker tag
      run: |
        echo "::set-env name=DOCKER_TAG::$GITHUB_SHA";

    - name: Build test image
      run: |
        make docker-test-image DOCKER_TAG=$DOCKER_TAG

    - name: Run GPU tests
      run: |
        make docker-test-run DOCKER_TAG=$DOCKER_TAG ARGS='gpu-test'

  # Builds the API documentation and pushes it to the appropriate folder in the
  # allennlp-docs repo.
  docs:
    name: Docs
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v1

    - name: Setup SSH Client ðŸ”‘
      # Only run this on master commits to main repo.
      if: github.repository == 'allenai/allennlp-models' && github.event_name == 'push'
      uses: webfactory/ssh-agent@v0.2.0
      with:
        ssh-private-key: ${{ secrets.DOCS_DEPLOY_KEY }}

    - name: Setup Python
      uses: actions/setup-python@v1
      with:
        python-version: 3.7

    - uses: actions/cache@v2
      with:
        path: ${{ env.pythonLocation }}
        key: ${{ runner.os }}-pydeps-${{ env.pythonLocation }}-${{ hashFiles('requirements.txt') }}-${{ hashFiles('dev-requirements.txt') }}

    - name: Install requirements
      run: |
        pip install --upgrade pip setuptools wheel
        pip install --upgrade --upgrade-strategy eager -r requirements.txt
        pip install --upgrade --upgrade-strategy eager -r dev-requirements.txt

    - name: Debug info
      run: |
        pip freeze

    - name: Build docs
      run: |
        make build-docs

    - name: Configure Git
      # Only run this on master commits to main repo.
      if: github.repository == 'allenai/allennlp-models' && github.event_name == 'push'
      run: |
        git config --global user.email "ai2service@allenai.org"
        git config --global user.name "ai2service"
        git config --global push.default simple

    - name: Set target folders
      # Only run this on master commits to main repo.
      if: github.repository == 'allenai/allennlp-models' && github.event_name == 'push'
      run: |
        if [[ $GITHUB_EVENT_NAME == 'release' ]]; then
            echo "::set-env name=DOCS_FOLDER::models/${GITHUB_REF#refs/tags/}";
        else
            echo "::set-env name=DOCS_FOLDER::models/master";
        fi

    - name: Stage docs
      # Only run this on master commits to main repo.
      if: github.repository == 'allenai/allennlp-models' && github.event_name == 'push'
      run: |
        echo "Staging docs to $DOCS_FOLDER"

        # Checkout allennlp-docs to /allennlp-docs
        git clone git@github.com:allenai/allennlp-docs.git ~/allennlp-docs
        
        # Copy the generated docs to the checked out docs repo
        rm -rf ~/allennlp-docs/$DOCS_FOLDER/
        mkdir -p ~/allennlp-docs/$DOCS_FOLDER
        cp -r site/* ~/allennlp-docs/$DOCS_FOLDER

    - name: Update shortcuts
      # Only run this on master commits to main repo.
      if: github.repository == 'allenai/allennlp-models' && github.event_name == 'push'
      run: |
        # Fail immediately if any step fails.
        set -e

        LATEST=models/$(./scripts/get_version.py latest)
        STABLE=models/$(./scripts/get_version.py stable)

        cd ~/allennlp-docs/

        echo "Updating models/latest/index.html to point to $LATEST"
        mkdir -p models/latest
        cat >models/latest/index.html << EOL
        <!DOCTYPE html>
        <html>
          <head>
            <meta http-equiv="Refresh" content="0; url=/${LATEST}/" />
          </head>
          <body>
            <p>Please follow <a href="/${LATEST}/">this link</a>.</p>
          </body>
        </html>
        EOL

        echo "Updating models/stable/index.html to point to $STABLE"
        mkdir -p models/stable
        cat >models/stable/index.html << EOL
        <!DOCTYPE html>
        <html>
          <head>
            <meta http-equiv="Refresh" content="0; url=/${STABLE}/" />
          </head>
          <body>
            <p>Please follow <a href="/${STABLE}/">this link</a>.</p>
          </body>
        </html>
        EOL

    - name: Deploy docs
      # Only run this on master commits to main repo.
      if: github.repository == 'allenai/allennlp-models' && github.event_name == 'push'
      run: |
        # And push them up to GitHub
        cd ~/allennlp-docs/
        git add -A
        git commit -m "automated update of the models docs"
        git push
